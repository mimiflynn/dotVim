set nocompatible

" Keyboard Shortcuts

let mapleader = '\'

" Let's us save with \w.
" \ is the default leader key.
map <leader>w :w!<cr>

" Fast editing of the .vimrc.local
map <leader>e :tabedit! ~/.vimrc.local<CR>

" Clear trailing whitespace with \s and save the file.
map <leader>s :%s/\s\+$//e<CR>:w!<CR>

" Open files quickly with \o.
map <leader>o :tabedit<Space>

"map <leader>t :CommandT<CR>
map <leader>p :CtrlP<CR>

set wildignore+=*/tmp/*,*.so,*.swp,*.zip

" Open files verticall quickly with \v.
map <leader>v :vsplit<Space>

" Better tab functionality.
map <leader>[ :tabprev<CR>
map <leader>] :tabnext<CR>
map <leader>- :tabfirst<CR>
map <leader>= :tablast<CR>

" Buffer shortcuts
map <leader>b :buffer<Space>

" Toggle paste mode with \p
" set pastetoggle=<leader>p

" Toggle line numbers with \n
nmap <leader>n :set invnumber<CR>

map <space> /
map <c-space> ?

" Other Customization

set wrap
set linebreak
set nolist

set mouse=a

colorscheme ir_black
"colorscheme darkdot

" When vimrc is edited, reload it
autocmd! bufwritepost .vimrc.local source ~/.vimrc.local

" Column at line 80
if version >= 703
  set colorcolumn=81,82
endif

"highlight bg color of current line
hi cursorline ctermbg=234
hi colorcolumn ctermbg=234

let g:CommandTAcceptSelectionMap = '<C-t>'
let g:CommandTAcceptSelectionTabMap = '<CR>'

" Nerdtree stuff
map <C-n> :NERDTreeToggle<CR>
autocmd vimenter * NERDTree

" open nerdtree automatically when no files were specified
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" close vim if nerdtree is all that is left
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" nerdtree arrow config
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

" use js as jsx extention
let g:jsx_ext_required = 0

" json
au BufRead,BufNewFile *.json set filetype=json

" tabs
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
autocmd FileType javascript,jsx setlocal expandtab shiftwidth=2 softtabstop=2

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
let g:syntastic_javascript_checkers = ['eslint', 'jsxhint']
let g:syntastic_javascript_jsxhint_exec = 'jsx-jshint-wrapper'
let g:syntastic_json_checkers=['jsonlint']

" air-line
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" fixing insert arrow key issue on linux
" nnoremap <silent> <ESC>OA <ESC>ki
" nnoremap <silent> <ESC>OB <ESC>ji
" nnoremap <silent> <ESC>OC <ESC>hi
" nnoremap <silent> <ESC>OD <ESC>li
" inoremap <silent> <ESC>OA <ESC>ki
" inoremap <silent> <ESC>OB <ESC>ji
" inoremap <silent> <ESC>OC <ESC>hi
" inoremap <silent> <ESC>OD <ESC>li

